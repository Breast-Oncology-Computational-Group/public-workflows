version 1.0

import "utils.wdl" as utils
workflow run_numbat {
    input {
        String sample_id
        File gex_h5ad
        String zones = "us-central1-a"
        }

    call preprare_allele_df {
        input:
            sample_id = sample_id,
            zones = zones,
    }
    call utils.h5ad_to_rds as h5ad_to_rds {
        input:
            h5ad = gex_h5ad,
            zones = zones,
    }
    call numbat {
        input:
            count_mtrx = h5ad_to_rds.count_mtrx,
            cell_type_annotation = h5ad_to_rds.metadata,
            allele_df = preprare_allele_df.allele_df,
            zones = zones,
    }

    output {
        Array[File] numbat_results = numbat.numbat_results
    }
}

task preprare_allele_df {
    input {
        File bam_file
        File barcodes_file
        String sample_id
        String zones = "us-central1-a"
        String docker_image = "pkharchenkolab/numbat-rbase:v1.4.2"
        Int memory = 10
        Int cpu = 8
        Int disk = 50
    }
    command {
    Rscript /numbat/inst/bin/pileup_and_phase.R \
        --label "~{sample_id}" \
        --samples "~{sample_id}" \
        --bams "~{bam_file}" \
        --barcodes "~{barcodes_file}" \
        --outdir results \
        --gmap /Eagle_v2.4.1/tables/genetic_map_hg38_withX.txt.gz \
        --snpvcf /data/genome1K.phase3.SNP_AF5e2.chr1toX.hg38.vcf \
        --paneldir /data/1000G_hg38 \
        --ncores "~{cpu}"
    }
    output {
        File allele_df = "results/~{sample_id}_allele_counts.tsv.gz"
    }
    runtime {
        zones: "${zones}"
        docker: "${docker_image}"
        memory: "${memory}G"
        cpu: "${cpu}"
        disks: "local-disk ${disk} HDD"
    }
}

task numbat {
    input {
        File count_mtrx
        File allele_df
        File cell_type_annotation # must have three columns: barcode, cnv_celltype, CNV_Group
        String genome_build
        Boolean draw_plots = true
        Float t = 0.00001
        # runtime
        Int ncores = 8
        String zones = "us-central1-a"
        String docker_image = "pkharchenkolab/numbat-rbase:v1.4.2"
        Int memory = 10
        Int cpu = 1
        Int disk = 20
    }

    command {
        R --no-save  <<RSCRIPT
        library(numbat)
        count_mtrx = readRDS("~{count_mtrx}")
        cell_type_annotation = readRDS("~{cell_type_annotation}")
        case_mtrx = count_mtrx[, cell_type_annotation$CNV_Group == "case"]
        reference_mtrx = count_mtrx[, cell_type_annotation$CNV_Group == "reference"]
        reference_annotation = cell_type_annotation[cell_type_annotation$CNV_Group == "reference",c('barcode','cnv_celltype')]
        colnames(reference_annotation) = c('cell','group')
        allele_df = read.table(gzfile("~{allele_df}"), sep='\t', header=TRUE)
        ref_internal = aggregate_counts(reference_mtrx, reference_annotation, normalized=TRUE)
        out = run_numbat(
            case_mtrx, # gene x cell integer UMI count matrix 
            ref_internal, # reference expression profile, a gene x cell type normalized expression level matrix
            allele_df, # allele dataframe generated by pileup_and_phase script
            genome = "~{genome_build}",
            t = ~{t},
            ncores = ~{ncores},
            plot = ~{draw_plots},
            out_dir = './results/'
        )
        RSCRIPT
    }

    output {
        Array[File] numbat_results = glob("results/*")
    }

    runtime {
        zones: "${zones}"
        docker: "${docker_image}"
        memory: "${memory}G"
        cpu: "${cpu}"
        disks: "local-disk ${disk} HDD"
    }
}